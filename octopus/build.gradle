plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm'
}

group = 'com.koupper'
version = '5.0.0'

application {
    mainClass = 'com.koupper.octopus.OctopusKt'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    // ...
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

tasks.named('jar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest { attributes 'Main-Class': 'com.koupper.octopus.OctopusKt' }

    from({
        def files = configurations.runtimeClasspath.getFiles().findAll { it?.exists() }
        files.collect { it.isDirectory() ? it : zipTree(it) }
    })

    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.register('optimized', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest { attributes 'Main-Class': 'com.koupper.octopus.OctopusKt' }

    from sourceSets.main.output
    from({
        def filtered = configurations.runtimeClasspath.getFiles().findAll { f ->
            f?.exists() && (
                    f.name.contains('container') ||
                            f.name.contains('providers') ||
                            f.name.contains('configurations') ||
                            f.name.contains('shared') ||
                            f.name.contains('os') ||
                            f.name.contains('annotations') ||
                            f.name.contains('orchestrator-core')
            )
        }
        filtered.each { println "Octopus dependency Included: ${it.name}" }
        filtered.collect { it.isDirectory() ? it : zipTree(it) }
    })

    archiveBaseName = 'octopus'
    archiveVersion = project.version.toString()

    doLast { println 'Octopus generated.' }

    preserveFileTimestamps = false
    reproducibleFileOrder = true
}
