plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm'
}

group = 'com.koupper'

application {
    mainClass = 'com.koupper.octopus.OctopusKt'
}

repositories {
    mavenCentral()
}

tasks.named('jar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // Cambia de INCLUDE a EXCLUDE
    manifest { attributes 'Main-Class': 'com.koupper.octopus.OctopusKt' }

    from sourceSets.main.output
    from({
        // Usar un Set para evitar duplicados
        def files = configurations.runtimeClasspath.getFiles().findAll { it?.exists() }
        def uniqueFiles = files.toSet() // Elimina duplicados
        uniqueFiles.each { println "Unique JAR dependency: ${it.name}" }
        uniqueFiles.collect { it.isDirectory() ? it : zipTree(it) }
    })

    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.register('verifyFatJar') {
    dependsOn fatJar
    doLast {
        println "🔍 Verificando contenido del JAR..."
        def jarFile = tasks.fatJar.archiveFile.get().asFile
        def process = "jar tf ${jarFile}".execute()
        def foundServices = false
        process.inputStream.eachLine { line ->
            if (line.contains("META-INF/services")) {
                println "   ✅ $line"
                foundServices = true
            }
        }
        if (foundServices) {
            println "🎉 Archivos de servicio encontrados!"
        } else {
            println "⚠️ No se encontraron archivos de servicio META-INF/services"
        }
    }
}

tasks.register('optimized', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest { attributes 'Main-Class': 'com.koupper.octopus.OctopusKt' }

    from sourceSets.main.output
    from({
        def filtered = configurations.runtimeClasspath.getFiles().findAll { f ->
            f?.exists() && (
                    f.name.contains('container') ||
                            f.name.contains('providers') ||
                            f.name.contains('configurations') ||
                            f.name.contains('shared') ||
                            f.name.contains('os') ||
                            f.name.contains('annotations') ||
                            f.name.contains('orchestrator-core') ||
                            f.name.contains('logging')
            )
        }
        filtered.each { println "Octopus dependency Included: ${it.name}" }
        filtered.collect { it.isDirectory() ? it : zipTree(it) }
    })

    archiveBaseName = 'octopus'
    archiveVersion = project.version.toString()

    doLast { println 'Octopus generated.' }

    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.register('fatJar', Jar) {
    archiveBaseName = 'octopus'
    archiveVersion = project.version.toString()

    manifest {
        attributes 'Main-Class': 'com.koupper.octopus.OctopusKt'
    }

    from sourceSets.main.output
    from {
        configurations.runtimeClasspath.collect { dep ->
            if (dep.isDirectory()) {
                dep
            } else {
                zipTree(dep).matching {
                    // QUITA TODOS LOS EXCLUDE - esto es importante
                    // Solo excluye archivos de firma, nada más
                    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
                }
            }
        }
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    doLast {
        println "✅ JAR generado: ${archiveFile.get()}"
        println "📦 Tamaño: ${archiveFile.get().asFile.length() / (1024 * 1024)} MB"
    }
}
